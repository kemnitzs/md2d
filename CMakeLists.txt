CMAKE_MINIMUM_REQUIRED(VERSION 3.0)
PROJECT(md2d)

SET( CMAKE_BUILD_TYPE RELEASE )
option( USE_ADDRESS_SANITIZER "use address sanitizer of gcc/clang" OFF )
option( USE_LIBRARY_ACCESS_CHECK "use std++ build in access detection for containers" OFF )
option( USE_BACKWARD "use backward cpp" ON )

FIND_PACKAGE( Boost COMPONENTS mpi serialization REQUIRED)
FIND_PACKAGE( MPI REQUIRED )

#subdirectories to use
add_subdirectory(${CMAKE_CURRENT_SOURCE_DIR}/backward_cpp)

SET( CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -march=native -fopenmp" )

SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -Wall -pedantic" )
if ( ${USE_ADDRESS_SANITIZER} )
  SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -fsanitize=address" )
endif()
if ( ${USE_LIBRARY_ACCESS_CHECK} )
  SET( CMAKE_CXX_FLAGS_DEBUG "${CMAKE_CXX_FLAGS_DEBUG} -D_GLIBCXX_DEBUG" )
endif()

SET( CMAKE_CXX_FLAGS_RELEASE "${CMAKE_CXX_FLAGS_RELEASE}" )

SET( CMAKE_CXX_STANDARD 14 )

#SET( EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin )
#SET( LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib )

SET( CMAKE_EXPORT_COMPILE_COMMANDS on )


ADD_EXECUTABLE(bin_md2d main.cpp ${BACKWARD_ENABLE})
if ( ${USE_BACKWARD} )
  add_backward(bin_md2d)
endif()

#TARGET_INCLUDE_DIRECTORIES( bin_md2d )
#TARGET_LINK_LIBRARIES( bin_md2d )
TARGET_INCLUDE_DIRECTORIES( bin_md2d PRIVATE ${Boost_INCLUDE_DIRS} ${MPI_INCLUDE_PATH})
TARGET_LINK_LIBRARIES( bin_md2d ${Boost_LIBRARIES} ${MPI_LIBRARIES})

